{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/engine/Direction.js","webpack:///./src/engine/StandardGenerator.js","webpack:///./src/engine/Tetris.js","webpack:///./src/engine/Tile.js","webpack:///./src/main.js","webpack:///./src/ui/console/ConsoleTetris.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA,C;;;;;;;;;;;ACHA,aAAa,mBAAO,CAAC,oCAAQ;;AAE7B;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;ACPA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB;;AAErB;AACA;;AAEA,iCAAiC,kBAAkB;AACnD;;AAEA;AACA,qCAAqC,6CAA6C;AAClF;AACA,oCAAoC;AACpC,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC;AACA;;;AAGA;;;;;;;;;;;;;ACzIA,kBAAkB,mBAAO,CAAC,8CAAa;;AAEvC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,mBAAmB,WAAW;AAC9B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,C;;;;;;;;;;;AC9CA,sBAAsB,mBAAO,CAAC,qEAA4B;;AAE1D;;;;;;;;;;;;;ACFA,eAAe,mBAAO,CAAC,mDAAqB;AAC5C,0BAA0B,mBAAO,CAAC,yEAAgC;;AAElE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA,SAAS,uBAAuB;;AAEhC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,C","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","module.exports = {\r\n  CW: 'CW',\r\n  CCW: 'CCW'\r\n}","const Tile = require('./Tile');\r\n\r\nmodule.exports = class StandardGenerator {\r\n\r\n  next() {\r\n    return new Tile('####', 'I');\r\n  }\r\n}","module.exports = class Tetris {\r\n\r\n  constructor(width, height, generator) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.generator = generator;\r\n    this.listeners = new Map();\r\n\r\n    this.grid = [...new Array(height)].map(r => new Array(width));\r\n\r\n    this.current = null;\r\n    this.next = null;\r\n    this.position = null;\r\n  }\r\n\r\n  on(eventName, fn) {\r\n    if (!this.listeners.has(eventName)) {\r\n      this.listeners.set(eventName, []);\r\n    }\r\n\r\n    this.listeners.get(eventName).push(fn);\r\n  }\r\n\r\n  getState() {\r\n    return {\r\n      position: { ...this.position },\r\n      tile: this.current,\r\n      grid: this.grid.map(r => r.slice())\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.next = this.generator.next();\r\n    this._spawn();\r\n\r\n\r\n  }\r\n\r\n  pause() {\r\n\r\n  }\r\n\r\n  resume() {\r\n\r\n  }\r\n\r\n  move(dir) {\r\n    let position = { ...this.position };\r\n    if (dir === 'LEFT') {\r\n      position.x--;\r\n    } else {\r\n      position.x++;\r\n    }\r\n\r\n    if (this._isValid(this.current, position)) {\r\n      this.position = position;\r\n      this._fireEvent('move', { position });\r\n    }\r\n  }\r\n\r\n  rotate(dir) {\r\n    if (this._isValid(this.current.rotate(dir), position)) {\r\n      this.current = this.current.rotate(dir);\r\n      this._fireEvent('rotate', { tile: this.current });\r\n    }\r\n  }\r\n\r\n  _spawn() {\r\n    let x = Math.floor(this.width / 2);\r\n    let y = 0;\r\n\r\n    this.position = { x, y };\r\n\r\n    this.current = this.next;\r\n    this.next = this.generator.next();\r\n\r\n    this._fireEvent('generate', { next: this.next });\r\n  }\r\n\r\n  _step() {\r\n    if (this._isValid(this.current, { x: this.position.x, y: this.position.y + 1 })) {\r\n      this.position.y++;\r\n      this._fireEvent('dropstep', {});\r\n    } else {\r\n      this._dropEnd();\r\n      this._spawn();\r\n    }\r\n  }\r\n\r\n  _isValid(tile, position) {\r\n    let y = 0;\r\n    for (let row of tile.getLayout()) {\r\n      let x = 0;\r\n      for (let value of row) {\r\n        let py = y + position.y;\r\n        let px = x + position.x;\r\n\r\n        if (value && (py < 0 || py >= this.height || px < 0 || px >= this.width || this.grid[py][px])) {\r\n          return false;\r\n        }\r\n        x++;\r\n      }\r\n      y++;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  _dropEnd() {\r\n    let y = 0;\r\n    for (let row of this.current.getLayout()) {\r\n      let x = 0;\r\n      for (let value of row) {\r\n        if (value) {\r\n          this.grid[this.position.y + y][this.position.x + x] = this.current.getTag();\r\n        }\r\n        x++;\r\n      }\r\n      y++;\r\n    }\r\n\r\n    this._fireEvent('dropend', {});\r\n  }\r\n\r\n  _fireEvent(name, payload, update = true) {\r\n    let listeners = this.listeners.get(name);\r\n\r\n    if (listeners) {\r\n      listeners.forEach(l => l.call(this, payload));\r\n    }\r\n\r\n    if (update) {\r\n      this._fireEvent('update', {}, false);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n","const Direction = require('./Direction');\r\n\r\nmodule.exports = class Tile {\r\n\r\n  constructor(layout, tag) {\r\n    this.layout = layout.split('\\n').map(c => c.trim().split('').map(b => b == '#' ? 1 : 0));\r\n    this.tag = tag;\r\n  }\r\n\r\n  getLayout() {\r\n    return this.layout.slice();\r\n  }\r\n\r\n  getWidth() {\r\n    return this.layout.reduce((a, c) => Math.max(a, c.length), 0);\r\n  }\r\n\r\n  getHeight() {\r\n    return this.layout.length;\r\n  }\r\n\r\n  getTag() {\r\n    return this.tag;\r\n  }\r\n\r\n  rotate(dir) {\r\n    let height = this.getHeight();\r\n    let width = this.getWidth();\r\n\r\n    let rotated = new Array(width);\r\n\r\n    for (let i = 0; i < width; i++) {\r\n      rotated[i] = new Array(height);\r\n    }\r\n\r\n    this.layout.forEach((row, y) => {\r\n      row.forEach((col, x) => {\r\n        let newY = dir === Direction.CCW ? -x + width - 1 : x;\r\n        let newX = dir === Direction.CCW ? y : -y + height - 1;\r\n\r\n        rotated[newY][newX] = col;\r\n      });\r\n    });\r\n\r\n    return new Tile(rotated.map(r => r.map(c => c ? '#' : '.').join('')).join('\\n'), this.tag);\r\n  }\r\n}","const ConsoleTetris = require('./ui/console/ConsoleTetris');\r\n\r\nlet tetris = new ConsoleTetris();\r\n\r\n","const Tetris = require('../../engine/Tetris');\r\nconst StandardGenerator = require('../../engine/StandardGenerator');\r\n\r\nmodule.exports = class ConsoleTetris {\r\n\r\n  constructor() {\r\n    this.tetris = new Tetris(10, 20, new StandardGenerator());\r\n    this.tetris.on('update', e => {\r\n      this.render();\r\n      setTimeout(() => {\r\n        this.tetris._step();\r\n      }, 300);\r\n    });\r\n\r\n    this.tetris.start();\r\n  }\r\n\r\n  render() {\r\n    console.clear();\r\n\r\n    let { position, tile, grid } = this.tetris.getState();\r\n\r\n    let y = 0;\r\n    for (let row of tile.getLayout()) {\r\n      let x = 0;\r\n      for (let value of row) {\r\n        let py = y + position.y;\r\n        let px = x + position.x;\r\n\r\n        if (value) {\r\n          grid[py][px] = '#';\r\n        }\r\n        x++;\r\n      }\r\n      y++;\r\n    }\r\n    let rendered = grid.map(row => row.map(c => c ? '#' : ' ').join()).join('\\n');\r\n    console.log(rendered);\r\n  }\r\n\r\n}"],"sourceRoot":""}